#!/bin/bash
set -e
[[ -n $DEBUG ]] && set -x

# Returns the full path referenced by $1
function get_path {
  readlink -f "$1"
}

export CEILED_CLI_DIR=$(get_path "$(dirname "$0")")
export CEILED_DIR=$(dirname "$CEILED_CLI_DIR")

export DEV="false"

# Make an alias for docker-compose so it includes the right .yml config files
# shellcheck source=./utils.sh
source "$CEILED_CLI_DIR"/utils.sh
export COMPOSE_FILES="$(get_compose_files)"
alias docker-compose="docker-compose \$COMPOSE_FILES"

function help {
  cli_name=${0##*/}
  echo "CeiLED CLI - version $(get_version)

Usage: $cli_name [--dir DIR] [--dev] COMMAND

Options:
  --dir DIR             Apply the commands to the CeiLED installation in DIR.
                        Useful if you have multiple installations of CeiLED.
  --dev                 Build CeiLED from source. Must be used from within the original Git repository.

Commands:
  auth add|remove|list  Manage authorisation tokens. See '$cli_name auth help'
  env                   Edit the .env file for docker-compose.
  build                 Build CeiLED's Docker containers from source. 
                        Must be used from within the original Git repository and implies --dev
  install DIR REF?      Install CeiLED to directory DIR. Will be created if it doesn't exist.
                        Define REF as a Git reference (e.g. the branch 'develop') to install
                        a different version of CeiLED. 
  logs ARGS?            Shows the latest of CeiLED's logs. Any arguments passed to this command 
                        will be passed to the underlying 'docker-compose logs'.
  restart all?          Restarts CeiLED or starts CeiLED if it is not yet running. 
          [driver|web   Restarts one or more of CeiLED's services.
           web|server
           mongodb]?
  start                 Starts CeiLED in the background by calling 'docker-compose up -d'.
  status                Prints the status of all running CeiLED Docker containers.
  stop                  Stops CeiLED by calling 'docker-compose down'.
  update                Updates CeiLED by downloading the latest versions of CeiLED's Docker containers.
  *                     Prints this help
"
}

while true; do
  case "$1" in
    --dev)
      [[ -f "$CEILED_DIR/docker-compose.dev.yml" ]] || fail "--dev requires that docker-compose.dev.yml is present, which is not included in the default installation of CeiLED."
      export DEV="true"
      export COMPOSE_FILES="$(get_compose_files)"
      shift
      ;;
    --dir)
      [[ -z "$2" ]] && fail "--dir requires an argument."
      [[ -z "$3" ]] && fail "--dir got argument $2, but no actual command for ceiled to run!"
      [[ ! -d "$2" ]] && fail "$2 is not a directory"
      export CEILED_DIR="$2"
      print_green "Using $2 as CeiLED directory"
      shift
      shift
      ;;
    auth)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/auth.sh
      source "$CEILED_CLI_DIR/commands/auth.sh"
      shift
      auth "$@"
      exit
      ;;
    build)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/build.sh
      source "$CEILED_CLI_DIR/commands/build.sh"
      shift
      build "$@"
      exit
      ;;
    env)
      # shellcheck source=./commands/env.sh
      source "$CEILED_CLI_DIR/commands/env.sh"
      env
      exit
      ;;
    install)
      # shellcheck source=./commands/install.sh
      source "$CEILED_CLI_DIR/commands/install.sh"
      shift
      install "$@"
      exit
      ;;
    logs)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/logs.sh
      source "$CEILED_CLI_DIR/commands/logs.sh"
      shift
      logs "$@"
      exit
      ;;
    restart)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/restart.sh
      source "$CEILED_CLI_DIR/commands/restart.sh"
      restart "$2"
      exit
      ;;
    start)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/start.sh
      source "$CEILED_CLI_DIR/commands/start.sh"
      start
      exit
      ;;
    status)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/status.sh
      source "$CEILED_CLI_DIR/commands/status.sh"
      status
      exit
      ;;
    stop)
      assert_ceiled_dir "$CEILED_DIR"
      # shellcheck source=./commands/stop.sh
      source "$CEILED_CLI_DIR/commands/stop.sh"
      stop
      exit
      ;;
    update)
      # shellcheck source=./commands/update.sh
      source "$CEILED_CLI_DIR/commands/update.sh"
      update
      exit
      ;;
    *)
      is_help "$1" || print_red "Error: Unknown command: $1\n"
      help
      exit 1
      ;;
  esac
done
