#!/bin/bash
set -e

# Returns the full path referenced by $1
function get_path {
  readlink -f "$1"
}

export CEILED_CLI_DIR=$(get_path $(dirname $0))
export CEILED_DIR=$(dirname $CEILED_CLI_DIR)
export DEBUG="false"

function get_version {
  cat $CEILED_CLI_DIR/version
}

function help {
  cli_name=${0##*/}
  echo "CeiLED CLI - version $(get_version)

Usage: $cli_name [--debug] [--dir DIR] COMMAND

Options:
  --debug        Use CeiLED with the debug driver instead of the actual driver.
  --dir DIR      Apply the commands to the CeiLED installation in DIR. Useful if you have multiple installations of CeiLED.

Commands:
  env            Edit the .env file for docker-compose.
  install DIR    Install CeiLED to directory DIR. Will be created if it doesn't exist. Requires sudo.
  logs ARGS?     Shows the latest of CeiLED's logs. Any arguments passed to this command will be passed to the underlying 'docker-compose logs'.
  restart        Restarts CeiLED or starts CeiLED if it is not yet running. Uses a rolling update mechanism for the driver, server and MongoDB, so those will have no downtime.
  start          Starts CeiLED in the background by calling 'docker-compose up -d'. Uses the docker-compose.debug.yml file when using --debug
  status         Prints the status of all running CeiLED Docker containers.
  stop           Stops CeiLED.
  update         Updates CeiLED by downloading the latest versions of CeiLED's Docker containers.
  *              Prints this help
"
# Deprecated, since only LetsEncrypt HTTPS is possible now anyways:
# root_cert    Copy the root certificate from ceiled-web's data volume to the current directory. This can then be imported into browsers to allow CeiLED to be hosted over HTTPS without needing a public domain name.

# Currently not in use because it requires the option to install source files
# build          Build CeiLED's Docker containers from source. Uses the docker-compose.debug.yml file when using --debug
}

function print_red {
  local red='\033[0;31m'
  local nocolor='\033[0m'
  echo -e "${red}$1${nocolor}"
}

function print_yellow {
  local yellow='\033[0;33m'
  local nocolor='\033[0m'
  echo -e "${yellow}$1${nocolor}"
}

function print_green {
  local green='\033[0;32m'
  local nocolor='\033[0m'
  echo -e "${green}$1${nocolor}"
}

function fail {
  print_red "!-> Error: $1"
  exit 1
}

function is_debug {
  [[ $DEBUG == "true" ]]
}

function is_ceiled_dir {
  [[ -f "$1/docker-compose.yml" ]] &&
  [[ -f "$1/docker-compose.debug.yml" ]] &&
  [[ -d "$1/ceiled-cli" ]] &&
  [[ -f "$1/ceiled-cli/ceiled" ]]
}

# TODO: add command: ceiled auth add NAME TOKEN
# TODO: add command: ceiled auth remove [NAME|TOKEN]
# TODO: add command: ceiled auth list

while true; do
  case "$1" in
    --debug)
      export DEBUG="true"
      shift
      ;;
    --dir)
      [[ -z "$2" ]] && fail "--dir requires an argument."
      [[ -z "$3" ]] && fail "--dir got argument $2, but no actual command for ceiled to run!"
      [[ ! -d "$2" ]] && fail "$2 is not a directory"
      if ! is_ceiled_dir "$2"; then fail "$2 is missing some files that should exist in an installation of CeiLED. If your installation is malformed, you may want to reinstall CeiLED."; fi
      export CEILED_DIR="$2"
      print_green "Using $2 as CeiLED directory"
      shift
      shift
      ;;
    # build)
    #   source "$CEILED_CLI_DIR/commands/build.sh"
    #   build
    #   exit
    #   ;;
    env)
      source "$CEILED_CLI_DIR/commands/env.sh"
      env
      exit
      ;;
    install)
      source "$CEILED_CLI_DIR/commands/install.sh"
      install "$2"
      exit
      ;;
    logs)
      source "$CEILED_CLI_DIR/commands/logs.sh"
      shift
      logs "$@"
      exit
      ;;
    restart)
      source "$CEILED_CLI_DIR/commands/restart.sh"
      restart "$2"
      exit
      ;;
    start)
      source "$CEILED_CLI_DIR/commands/start.sh"
      start
      exit
      ;;
    status)
      source "$CEILED_CLI_DIR/commands/status.sh"
      status
      exit
      ;;
    stop)
      source "$CEILED_CLI_DIR/commands/stop.sh"
      stop
      exit
      ;;
    update)
      source "$CEILED_CLI_DIR/commands/update.sh"
      update
      exit
      ;;
    # root_cert)
    #   source "$CEILED_CLI_DIR/commands/get_local_root_cert.sh"
    #   get_local_root_cert
    #   ;;
    *)
      print_red "Error: Unknown command: $1\n"
      help
      exit 1
      ;;
  esac
done